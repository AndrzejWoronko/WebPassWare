name: 'CI Windows-64 Relealse'

env:
    QT_VERSION: '5.15.2'
    
on:
    workflow_dispatch:
                
jobs:

  win64: 
          name: 'Windows 64-bit'
          runs-on: [windows-latest]                  
          env:
            QT_ARCH: 'win64_mingw81'
            MINGW_DIR: ../Qt/Tools/mingw810_64
            QT_BIN_DIR: ../Qt/5.15.2/mingw81_64/bin
            PORTABLE_DIR: output/portable/WebPassWare
            MINGW_URL: https://download.qt.io/online/qtsdkrepository/windows_x86/desktop/tools_mingw/qt.tools.win64_mingw810/8.1.0-1-202004170606x86_64-8.1.0-release-posix-seh-rt_v6-rev0.7z
            IFW42_DIR: ../Qt/Tools/QtInstallerFramework/4.2/bin/
            
          steps:
          
           - name: 'Cache Qt'
             id: cache-qt
             uses: actions/cache@v1
             with:
                path: ${{ github.workspace }}\..\Qt
                key: ${{ runner.os }}-${{ env.QT_VERSION }}-Qt-Cache
                
           - name: 'Install Qt'
             uses: jurplel/install-qt-action@v2
             with:
               cached: ${{ steps.cache-qt.outputs.cache-hit }}
               version: ${{ env.QT_VERSION }}
               host: 'windows'
               target: 'desktop'
               install-deps: 'true'
               arch: ${{ env.QT_ARCH }}
               dir: 'D:/'
               setup-python: 'false'                        
               tools: 'tools_ifw,4.2.0,qt.tools.ifw.42'
        
           - name: 'Install mingw'
             if: steps.cache-qt.outputs.cache-hit != 'true'
             shell: bash
             run: |
                 curl -L ${{ env.MINGW_URL }} --output ../mingw.7z
                 7z x -o"../Qt" ../mingw.7z
                 echo "${{ env.MINGW_DIR }}/bin" >> $GITHUB_PATH
            
           - name: 'Clone repo'
             uses: actions/checkout@v2
             with:
                ref: ${{ env.GITHUB_REF }}

           - name: 'Prepare output dir'
             shell: bash
             working-directory: ${{ github.workspace }}
             run: |
                mkdir -p output/build
                                                          
           - name: 'Compile WebPassWare'
             working-directory: ${{ github.workspace }}/output/build
             run: |
                qmake.exe ..\..\WebPassWare.pro
                mingw32-make.exe -j 2
                
           - name: 'Prepare portable dir'
             shell: bash
             working-directory: output
             run: |                             
                mkdir -p portable/WebPassWare
                cp -R build/bin/ portable/WebPassWare/
                
           - name: 'Clean-up portable dir'
             shell: bash
             run: |
                cd ${{ env.PORTABLE_DIR }}
                rm -f *.a
                echo "ABSOLUTE_PORTABLE_DIR=`pwd`" >> $GITHUB_ENV
       
           - name: 'Prepare portable distro (Qt)'
             shell: bash
             working-directory: ${{ env.Qt5_Dir }}
             run: |
                for f in Qt5Core Qt5Gui Qt5Network Qt5Sql Qt5Widgets libgcc_s_seh-1 libstdc++-6 libwinpthread-1; do cp bin/$f.dll "$ABSOLUTE_PORTABLE_DIR/bin/"; done
                cp bin/qt.conf "$ABSOLUTE_PORTABLE_DIR/bin/"
                mkdir -p "$ABSOLUTE_PORTABLE_DIR/bin/plugins/iconengines"
                mkdir -p "$ABSOLUTE_PORTABLE_DIR/bin/plugins/platforms"
                mkdir -p "$ABSOLUTE_PORTABLE_DIR/bin/plugins/styles"
                mkdir -p "$ABSOLUTE_PORTABLE_DIR/bin/plugins/imageformats"
                mkdir -p "$ABSOLUTE_PORTABLE_DIR/bin/plugins/sqldrivers"
                cp plugins/iconengines/qsvgicon.dll "$ABSOLUTE_PORTABLE_DIR/bin/plugins/iconengines"
                cp plugins/platforms/qwindows.dll "$ABSOLUTE_PORTABLE_DIR/bin/plugins/platforms"
                cp plugins/styles/qwindowsvistastyle.dll "$ABSOLUTE_PORTABLE_DIR/bin/plugins/styles"
                for f in qgif qicns qico qjpeg qsvg qtga qtiff qwbmp; do cp plugins/imageformats/$f.dll "$ABSOLUTE_PORTABLE_DIR/bin/plugins/imageformats"; done
                for f in qsqlite qsqlodbc qsqlpsql ; do cp plugins/sqldrivers/$f.dll "$ABSOLUTE_PORTABLE_DIR/bin/plugins/sqldrivers"; done

           - name: 'Prepare portable distro (Resources)'             
             shell: bash
             working-directory: ${{ github.workspace }}
             run: |
                cp icons/progicon.ico "$ABSOLUTE_PORTABLE_DIR"/
                cp icons/50px/WebPassWare.png "$ABSOLUTE_PORTABLE_DIR"/l 

           - name: 'Determine WebPassWare version'
             shell: bash
             working-directory: ${{ github.workspace }}
             run: |
                echo "WEBPASSWARE_VERSION=`grep WEBPASSWARE_VERSION CURRENT_VERSION.TXT | cut -d '=' -f 2-2`" >> $GITHUB_ENV
                                            
           - name: 'Assemble portable package'
             shell: bash
             run: |
                  cd $ABSOLUTE_PORTABLE_DIR/..
                  7z a -r webpassware-${WEBPASSWARE_VERSION} WebPassWare
                  ls -al

           - name: 'Upload package artifact'
             uses: actions/upload-artifact@v1
             with:
                name: webpassware-${{ env.WEBPASSWARE_VERSION }}
                path: output/portable/webpassware-${{ env.WEBPASSWARE_VERSION }}
