/****************************************************************************
** Meta object code from reading C++ file 'test_orm.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.15.2)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <memory>
#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'test_orm.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.15.2. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_MyModel_t {
    QByteArrayData data[20];
    char stringdata0[194];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_MyModel_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_MyModel_t qt_meta_stringdata_MyModel = {
    {
QT_MOC_LITERAL(0, 0, 7), // "MyModel"
QT_MOC_LITERAL(1, 8, 8), // "nameBool"
QT_MOC_LITERAL(2, 17, 7), // "nameInt"
QT_MOC_LITERAL(3, 25, 8), // "nameUint"
QT_MOC_LITERAL(4, 34, 12), // "nameLonglong"
QT_MOC_LITERAL(5, 47, 13), // "nameUlonglong"
QT_MOC_LITERAL(6, 61, 10), // "namedouble"
QT_MOC_LITERAL(7, 72, 8), // "nameBlob"
QT_MOC_LITERAL(8, 81, 8), // "nameChar"
QT_MOC_LITERAL(9, 90, 8), // "nameDate"
QT_MOC_LITERAL(10, 99, 8), // "nameTime"
QT_MOC_LITERAL(11, 108, 12), // "nameDatetime"
QT_MOC_LITERAL(12, 121, 10), // "nameString"
QT_MOC_LITERAL(13, 132, 9), // "namePrice"
QT_MOC_LITERAL(14, 142, 5), // "Price"
QT_MOC_LITERAL(15, 148, 10), // "nameAmount"
QT_MOC_LITERAL(16, 159, 6), // "Amount"
QT_MOC_LITERAL(17, 166, 9), // "nameValue"
QT_MOC_LITERAL(18, 176, 5), // "Value"
QT_MOC_LITERAL(19, 182, 11) // "nameVarchar"

    },
    "MyModel\0nameBool\0nameInt\0nameUint\0"
    "nameLonglong\0nameUlonglong\0namedouble\0"
    "nameBlob\0nameChar\0nameDate\0nameTime\0"
    "nameDatetime\0nameString\0namePrice\0"
    "Price\0nameAmount\0Amount\0nameValue\0"
    "Value\0nameVarchar"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_MyModel[] = {

 // content:
       8,       // revision
       0,       // classname
       0,    0, // classinfo
       0,    0, // methods
      16,   14, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // properties: name, type, flags
       1, QMetaType::Bool, 0x00095003,
       2, QMetaType::Int, 0x00095003,
       3, QMetaType::UInt, 0x00095003,
       4, QMetaType::LongLong, 0x00095003,
       5, QMetaType::ULongLong, 0x00095003,
       6, QMetaType::Double, 0x00095003,
       7, QMetaType::QByteArray, 0x00095003,
       8, QMetaType::QChar, 0x00095003,
       9, QMetaType::QDate, 0x00095003,
      10, QMetaType::QTime, 0x00095003,
      11, QMetaType::QDateTime, 0x00095003,
      12, QMetaType::QString, 0x00095003,
      13, 0x80000000 | 14, 0x0009500b,
      15, 0x80000000 | 16, 0x0009500b,
      17, 0x80000000 | 18, 0x0009500b,
      19, QMetaType::QString, 0x00095003,

       0        // eod
};

void MyModel::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{

#ifndef QT_NO_PROPERTIES
    if (_c == QMetaObject::ReadProperty) {
        auto *_t = static_cast<MyModel *>(_o);
        Q_UNUSED(_t)
        void *_v = _a[0];
        switch (_id) {
        case 0: *reinterpret_cast< bool*>(_v) = _t->getnameBool(); break;
        case 1: *reinterpret_cast< int*>(_v) = _t->getnameInt(); break;
        case 2: *reinterpret_cast< uint*>(_v) = _t->getnameUint(); break;
        case 3: *reinterpret_cast< qlonglong*>(_v) = _t->getnameLonglong(); break;
        case 4: *reinterpret_cast< qulonglong*>(_v) = _t->getnameUlonglong(); break;
        case 5: *reinterpret_cast< double*>(_v) = _t->getnamedouble(); break;
        case 6: *reinterpret_cast< QByteArray*>(_v) = _t->getnameBlob(); break;
        case 7: *reinterpret_cast< QChar*>(_v) = _t->getnameChar(); break;
        case 8: *reinterpret_cast< QDate*>(_v) = _t->getnameDate(); break;
        case 9: *reinterpret_cast< QTime*>(_v) = _t->getnameTime(); break;
        case 10: *reinterpret_cast< QDateTime*>(_v) = _t->getnameDatetime(); break;
        case 11: *reinterpret_cast< QString*>(_v) = _t->getnameString(); break;
        case 12: *reinterpret_cast< Price*>(_v) = _t->getnamePrice(); break;
        case 13: *reinterpret_cast< Amount*>(_v) = _t->getnameAmount(); break;
        case 14: *reinterpret_cast< Value*>(_v) = _t->getnameValue(); break;
        case 15: *reinterpret_cast< QString*>(_v) = _t->getnameVarchar(); break;
        default: break;
        }
    } else if (_c == QMetaObject::WriteProperty) {
        auto *_t = static_cast<MyModel *>(_o);
        Q_UNUSED(_t)
        void *_v = _a[0];
        switch (_id) {
        case 0: _t->setnameBool(*reinterpret_cast< bool*>(_v)); break;
        case 1: _t->setnameInt(*reinterpret_cast< int*>(_v)); break;
        case 2: _t->setnameUint(*reinterpret_cast< uint*>(_v)); break;
        case 3: _t->setnameLonglong(*reinterpret_cast< qlonglong*>(_v)); break;
        case 4: _t->setnameUlonglong(*reinterpret_cast< qulonglong*>(_v)); break;
        case 5: _t->setnamedouble(*reinterpret_cast< double*>(_v)); break;
        case 6: _t->setnameBlob(*reinterpret_cast< QByteArray*>(_v)); break;
        case 7: _t->setnameChar(*reinterpret_cast< QChar*>(_v)); break;
        case 8: _t->setnameDate(*reinterpret_cast< QDate*>(_v)); break;
        case 9: _t->setnameTime(*reinterpret_cast< QTime*>(_v)); break;
        case 10: _t->setnameDatetime(*reinterpret_cast< QDateTime*>(_v)); break;
        case 11: _t->setnameString(*reinterpret_cast< QString*>(_v)); break;
        case 12: _t->setnamePrice(*reinterpret_cast< Price*>(_v)); break;
        case 13: _t->setnameAmount(*reinterpret_cast< Amount*>(_v)); break;
        case 14: _t->setnameValue(*reinterpret_cast< Value*>(_v)); break;
        case 15: _t->setnameVarchar(*reinterpret_cast< QString*>(_v)); break;
        default: break;
        }
    } else if (_c == QMetaObject::ResetProperty) {
    }
#endif // QT_NO_PROPERTIES
    Q_UNUSED(_o);
    Q_UNUSED(_id);
    Q_UNUSED(_c);
    Q_UNUSED(_a);
}

QT_INIT_METAOBJECT const QMetaObject MyModel::staticMetaObject = { {
    QMetaObject::SuperData::link<COrmObject<MyModel>::staticMetaObject>(),
    qt_meta_stringdata_MyModel.data,
    qt_meta_data_MyModel,
    qt_static_metacall,
    nullptr,
    nullptr
} };


const QMetaObject *MyModel::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *MyModel::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_MyModel.stringdata0))
        return static_cast<void*>(this);
    return COrmObject<MyModel>::qt_metacast(_clname);
}

int MyModel::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = COrmObject<MyModel>::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    
#ifndef QT_NO_PROPERTIES
    if (_c == QMetaObject::ReadProperty || _c == QMetaObject::WriteProperty
            || _c == QMetaObject::ResetProperty || _c == QMetaObject::RegisterPropertyMetaType) {
        qt_static_metacall(this, _c, _id, _a);
        _id -= 16;
    } else if (_c == QMetaObject::QueryPropertyDesignable) {
        _id -= 16;
    } else if (_c == QMetaObject::QueryPropertyScriptable) {
        _id -= 16;
    } else if (_c == QMetaObject::QueryPropertyStored) {
        _id -= 16;
    } else if (_c == QMetaObject::QueryPropertyEditable) {
        _id -= 16;
    } else if (_c == QMetaObject::QueryPropertyUser) {
        _id -= 16;
    }
#endif // QT_NO_PROPERTIES
    return _id;
}
struct qt_meta_stringdata_Car_t {
    QByteArrayData data[2];
    char stringdata0[11];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_Car_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_Car_t qt_meta_stringdata_Car = {
    {
QT_MOC_LITERAL(0, 0, 3), // "Car"
QT_MOC_LITERAL(1, 4, 6) // "Number"

    },
    "Car\0Number"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_Car[] = {

 // content:
       8,       // revision
       0,       // classname
       0,    0, // classinfo
       0,    0, // methods
       1,   14, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // properties: name, type, flags
       1, QMetaType::QString, 0x00095103,

       0        // eod
};

void Car::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{

#ifndef QT_NO_PROPERTIES
    if (_c == QMetaObject::ReadProperty) {
        auto *_t = static_cast<Car *>(_o);
        Q_UNUSED(_t)
        void *_v = _a[0];
        switch (_id) {
        case 0: *reinterpret_cast< QString*>(_v) = _t->getNumber(); break;
        default: break;
        }
    } else if (_c == QMetaObject::WriteProperty) {
        auto *_t = static_cast<Car *>(_o);
        Q_UNUSED(_t)
        void *_v = _a[0];
        switch (_id) {
        case 0: _t->setNumber(*reinterpret_cast< QString*>(_v)); break;
        default: break;
        }
    } else if (_c == QMetaObject::ResetProperty) {
    }
#endif // QT_NO_PROPERTIES
    Q_UNUSED(_o);
    Q_UNUSED(_id);
    Q_UNUSED(_c);
    Q_UNUSED(_a);
}

QT_INIT_METAOBJECT const QMetaObject Car::staticMetaObject = { {
    QMetaObject::SuperData::link<COrmObject<Car>::staticMetaObject>(),
    qt_meta_stringdata_Car.data,
    qt_meta_data_Car,
    qt_static_metacall,
    nullptr,
    nullptr
} };


const QMetaObject *Car::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *Car::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_Car.stringdata0))
        return static_cast<void*>(this);
    return COrmObject<Car>::qt_metacast(_clname);
}

int Car::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = COrmObject<Car>::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    
#ifndef QT_NO_PROPERTIES
    if (_c == QMetaObject::ReadProperty || _c == QMetaObject::WriteProperty
            || _c == QMetaObject::ResetProperty || _c == QMetaObject::RegisterPropertyMetaType) {
        qt_static_metacall(this, _c, _id, _a);
        _id -= 1;
    } else if (_c == QMetaObject::QueryPropertyDesignable) {
        _id -= 1;
    } else if (_c == QMetaObject::QueryPropertyScriptable) {
        _id -= 1;
    } else if (_c == QMetaObject::QueryPropertyStored) {
        _id -= 1;
    } else if (_c == QMetaObject::QueryPropertyEditable) {
        _id -= 1;
    } else if (_c == QMetaObject::QueryPropertyUser) {
        _id -= 1;
    }
#endif // QT_NO_PROPERTIES
    return _id;
}
struct qt_meta_stringdata_DriverLicense_t {
    QByteArrayData data[2];
    char stringdata0[21];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_DriverLicense_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_DriverLicense_t qt_meta_stringdata_DriverLicense = {
    {
QT_MOC_LITERAL(0, 0, 13), // "DriverLicense"
QT_MOC_LITERAL(1, 14, 6) // "Number"

    },
    "DriverLicense\0Number"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_DriverLicense[] = {

 // content:
       8,       // revision
       0,       // classname
       0,    0, // classinfo
       0,    0, // methods
       1,   14, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // properties: name, type, flags
       1, QMetaType::Int, 0x00095103,

       0        // eod
};

void DriverLicense::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{

#ifndef QT_NO_PROPERTIES
    if (_c == QMetaObject::ReadProperty) {
        auto *_t = static_cast<DriverLicense *>(_o);
        Q_UNUSED(_t)
        void *_v = _a[0];
        switch (_id) {
        case 0: *reinterpret_cast< int*>(_v) = _t->getNumber(); break;
        default: break;
        }
    } else if (_c == QMetaObject::WriteProperty) {
        auto *_t = static_cast<DriverLicense *>(_o);
        Q_UNUSED(_t)
        void *_v = _a[0];
        switch (_id) {
        case 0: _t->setNumber(*reinterpret_cast< int*>(_v)); break;
        default: break;
        }
    } else if (_c == QMetaObject::ResetProperty) {
    }
#endif // QT_NO_PROPERTIES
    Q_UNUSED(_o);
    Q_UNUSED(_id);
    Q_UNUSED(_c);
    Q_UNUSED(_a);
}

QT_INIT_METAOBJECT const QMetaObject DriverLicense::staticMetaObject = { {
    QMetaObject::SuperData::link<COrmObject<DriverLicense>::staticMetaObject>(),
    qt_meta_stringdata_DriverLicense.data,
    qt_meta_data_DriverLicense,
    qt_static_metacall,
    nullptr,
    nullptr
} };


const QMetaObject *DriverLicense::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *DriverLicense::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_DriverLicense.stringdata0))
        return static_cast<void*>(this);
    return COrmObject<DriverLicense>::qt_metacast(_clname);
}

int DriverLicense::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = COrmObject<DriverLicense>::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    
#ifndef QT_NO_PROPERTIES
    if (_c == QMetaObject::ReadProperty || _c == QMetaObject::WriteProperty
            || _c == QMetaObject::ResetProperty || _c == QMetaObject::RegisterPropertyMetaType) {
        qt_static_metacall(this, _c, _id, _a);
        _id -= 1;
    } else if (_c == QMetaObject::QueryPropertyDesignable) {
        _id -= 1;
    } else if (_c == QMetaObject::QueryPropertyScriptable) {
        _id -= 1;
    } else if (_c == QMetaObject::QueryPropertyStored) {
        _id -= 1;
    } else if (_c == QMetaObject::QueryPropertyEditable) {
        _id -= 1;
    } else if (_c == QMetaObject::QueryPropertyUser) {
        _id -= 1;
    }
#endif // QT_NO_PROPERTIES
    return _id;
}
struct qt_meta_stringdata_CarDriver_t {
    QByteArrayData data[2];
    char stringdata0[15];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_CarDriver_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_CarDriver_t qt_meta_stringdata_CarDriver = {
    {
QT_MOC_LITERAL(0, 0, 9), // "CarDriver"
QT_MOC_LITERAL(1, 10, 4) // "Name"

    },
    "CarDriver\0Name"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_CarDriver[] = {

 // content:
       8,       // revision
       0,       // classname
       0,    0, // classinfo
       0,    0, // methods
       1,   14, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // properties: name, type, flags
       1, QMetaType::QString, 0x00095103,

       0        // eod
};

void CarDriver::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{

#ifndef QT_NO_PROPERTIES
    if (_c == QMetaObject::ReadProperty) {
        auto *_t = static_cast<CarDriver *>(_o);
        Q_UNUSED(_t)
        void *_v = _a[0];
        switch (_id) {
        case 0: *reinterpret_cast< QString*>(_v) = _t->getName(); break;
        default: break;
        }
    } else if (_c == QMetaObject::WriteProperty) {
        auto *_t = static_cast<CarDriver *>(_o);
        Q_UNUSED(_t)
        void *_v = _a[0];
        switch (_id) {
        case 0: _t->setName(*reinterpret_cast< QString*>(_v)); break;
        default: break;
        }
    } else if (_c == QMetaObject::ResetProperty) {
    }
#endif // QT_NO_PROPERTIES
    Q_UNUSED(_o);
    Q_UNUSED(_id);
    Q_UNUSED(_c);
    Q_UNUSED(_a);
}

QT_INIT_METAOBJECT const QMetaObject CarDriver::staticMetaObject = { {
    QMetaObject::SuperData::link<COrmObject<CarDriver>::staticMetaObject>(),
    qt_meta_stringdata_CarDriver.data,
    qt_meta_data_CarDriver,
    qt_static_metacall,
    nullptr,
    nullptr
} };


const QMetaObject *CarDriver::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *CarDriver::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_CarDriver.stringdata0))
        return static_cast<void*>(this);
    return COrmObject<CarDriver>::qt_metacast(_clname);
}

int CarDriver::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = COrmObject<CarDriver>::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    
#ifndef QT_NO_PROPERTIES
    if (_c == QMetaObject::ReadProperty || _c == QMetaObject::WriteProperty
            || _c == QMetaObject::ResetProperty || _c == QMetaObject::RegisterPropertyMetaType) {
        qt_static_metacall(this, _c, _id, _a);
        _id -= 1;
    } else if (_c == QMetaObject::QueryPropertyDesignable) {
        _id -= 1;
    } else if (_c == QMetaObject::QueryPropertyScriptable) {
        _id -= 1;
    } else if (_c == QMetaObject::QueryPropertyStored) {
        _id -= 1;
    } else if (_c == QMetaObject::QueryPropertyEditable) {
        _id -= 1;
    } else if (_c == QMetaObject::QueryPropertyUser) {
        _id -= 1;
    }
#endif // QT_NO_PROPERTIES
    return _id;
}
struct qt_meta_stringdata_Test_ORMObject_t {
    QByteArrayData data[23];
    char stringdata0[326];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_Test_ORMObject_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_Test_ORMObject_t qt_meta_stringdata_Test_ORMObject = {
    {
QT_MOC_LITERAL(0, 0, 14), // "Test_ORMObject"
QT_MOC_LITERAL(1, 15, 16), // "test_createTable"
QT_MOC_LITERAL(2, 32, 0), // ""
QT_MOC_LITERAL(3, 33, 9), // "test_save"
QT_MOC_LITERAL(4, 43, 9), // "test_find"
QT_MOC_LITERAL(5, 53, 12), // "test_findAll"
QT_MOC_LITERAL(6, 66, 10), // "test_first"
QT_MOC_LITERAL(7, 77, 9), // "test_last"
QT_MOC_LITERAL(8, 87, 16), // "test_findByValue"
QT_MOC_LITERAL(9, 104, 17), // "test_findByValues"
QT_MOC_LITERAL(10, 122, 17), // "test_findByParams"
QT_MOC_LITERAL(11, 140, 11), // "test_update"
QT_MOC_LITERAL(12, 152, 19), // "test_updateProperty"
QT_MOC_LITERAL(13, 172, 11), // "test_exists"
QT_MOC_LITERAL(14, 184, 15), // "test_existsById"
QT_MOC_LITERAL(15, 200, 11), // "test_remove"
QT_MOC_LITERAL(16, 212, 13), // "test_removeBy"
QT_MOC_LITERAL(17, 226, 14), // "test_removeAll"
QT_MOC_LITERAL(18, 241, 10), // "test_count"
QT_MOC_LITERAL(19, 252, 21), // "test_countByFieldName"
QT_MOC_LITERAL(20, 274, 13), // "test_toString"
QT_MOC_LITERAL(21, 288, 22), // "test_hasUnsavedChanges"
QT_MOC_LITERAL(22, 311, 14) // "test_dropTable"

    },
    "Test_ORMObject\0test_createTable\0\0"
    "test_save\0test_find\0test_findAll\0"
    "test_first\0test_last\0test_findByValue\0"
    "test_findByValues\0test_findByParams\0"
    "test_update\0test_updateProperty\0"
    "test_exists\0test_existsById\0test_remove\0"
    "test_removeBy\0test_removeAll\0test_count\0"
    "test_countByFieldName\0test_toString\0"
    "test_hasUnsavedChanges\0test_dropTable"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_Test_ORMObject[] = {

 // content:
       8,       // revision
       0,       // classname
       0,    0, // classinfo
      21,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  119,    2, 0x08 /* Private */,
       3,    0,  120,    2, 0x08 /* Private */,
       4,    0,  121,    2, 0x08 /* Private */,
       5,    0,  122,    2, 0x08 /* Private */,
       6,    0,  123,    2, 0x08 /* Private */,
       7,    0,  124,    2, 0x08 /* Private */,
       8,    0,  125,    2, 0x08 /* Private */,
       9,    0,  126,    2, 0x08 /* Private */,
      10,    0,  127,    2, 0x08 /* Private */,
      11,    0,  128,    2, 0x08 /* Private */,
      12,    0,  129,    2, 0x08 /* Private */,
      13,    0,  130,    2, 0x08 /* Private */,
      14,    0,  131,    2, 0x08 /* Private */,
      15,    0,  132,    2, 0x08 /* Private */,
      16,    0,  133,    2, 0x08 /* Private */,
      17,    0,  134,    2, 0x08 /* Private */,
      18,    0,  135,    2, 0x08 /* Private */,
      19,    0,  136,    2, 0x08 /* Private */,
      20,    0,  137,    2, 0x08 /* Private */,
      21,    0,  138,    2, 0x08 /* Private */,
      22,    0,  139,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void Test_ORMObject::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<Test_ORMObject *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->test_createTable(); break;
        case 1: _t->test_save(); break;
        case 2: _t->test_find(); break;
        case 3: _t->test_findAll(); break;
        case 4: _t->test_first(); break;
        case 5: _t->test_last(); break;
        case 6: _t->test_findByValue(); break;
        case 7: _t->test_findByValues(); break;
        case 8: _t->test_findByParams(); break;
        case 9: _t->test_update(); break;
        case 10: _t->test_updateProperty(); break;
        case 11: _t->test_exists(); break;
        case 12: _t->test_existsById(); break;
        case 13: _t->test_remove(); break;
        case 14: _t->test_removeBy(); break;
        case 15: _t->test_removeAll(); break;
        case 16: _t->test_count(); break;
        case 17: _t->test_countByFieldName(); break;
        case 18: _t->test_toString(); break;
        case 19: _t->test_hasUnsavedChanges(); break;
        case 20: _t->test_dropTable(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

QT_INIT_METAOBJECT const QMetaObject Test_ORMObject::staticMetaObject = { {
    QMetaObject::SuperData::link<QObject::staticMetaObject>(),
    qt_meta_stringdata_Test_ORMObject.data,
    qt_meta_data_Test_ORMObject,
    qt_static_metacall,
    nullptr,
    nullptr
} };


const QMetaObject *Test_ORMObject::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *Test_ORMObject::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_Test_ORMObject.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int Test_ORMObject::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 21)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 21;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 21)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 21;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
